parameters:
- name: artifact_name
  type: string
  default: 'artifact'
- name: projects
  type: string
  default: 'src/**/*.csproj'
- name: pool
  type: string
  default: 'Azure Pipelines'
  values:
  - 'Azure Pipelines'
  - 'Self-hosted'
- name: depends_on
  type: object
  default:
  - calculate_sem_version
- name: version
  type: string
  default: $(Build.BuildNumber)
- name: sonar_organization
  type: string
  default: $(SONAR_ORGANIZATION)
- name: sonar_project_key
  type: string
  default: $(SONAR_PROJECTKEY)
- name: sonar_service
  type: string
  default: 'SonarCloud'
- name: target_framework
  type: string
  default: net6.0
  values:
  - net5.0
  - net6.0
  - net7.0
  - net8.0
  - net9.0
- name: run_tests
  type: boolean
  default: true
- name: run_sonar
  type: boolean
  default: true
- name: install_new_relic
  type: boolean
  default: true

stages:
- stage: build_app
  displayName: 'App Build'
  pool:
    name: ${{parameters.pool}}
  dependsOn: ${{parameters.depends_on}}
  jobs:
  - job: build
    displayName: 'Build app'
    condition: succeeded()
    variables:
      version: ${{parameters.version}}
    steps:
    - checkout: self
      path: 'project'

    - checkout: 'templates'
      path: 'templates'

    - task: UseDotNet@2
      displayName: 'Installing .Net Core SDK'
      inputs:
        packageType: 'sdk'
        version: ${{ replace(replace(parameters.target_framework, '0', 'x'),  'net',  '') }}

    - ${{ if eq(parameters.install_new_relic, true) }}:
      - task: DotNetCoreCLI@2
        displayName: 'Add NewRelic'
        inputs:
          command: 'custom'
          projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
          custom: 'add'
          arguments: 'package NewRelic.Agent'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
        arguments: '--no-incremental --no-restore --configuration Release'

    - ${{ if eq(parameters.run_tests, true) }}:
      - task: DotNetCoreCLI@2
        displayName: Install ReportGenerator Global Tool
        inputs:
          command: custom
          custom: tool
          arguments: update dotnet-reportgenerator-globaltool --tool-path tools --ignore-failed-sources

      - bash: |
          ls $(Pipeline.Workspace)/project/test*/**/*.csproj | xargs -L1 dotnet test --collect:"XPlat Code Coverage" --settings $COVERLET_PATH --logger trx
        displayName: Test
        env:
          COVERLET_PATH: '$(Pipeline.Workspace)/templates/coverlet/coverlet.runsettings'

      - bash: |
          ./tools/reportgenerator "-reports:$(Pipeline.Workspace)/project/test*/*/TestResults/*/coverage.cobertura.xml" "-targetdir:$(Pipeline.Workspace)/project/Reports_Coverage" -reportTypes:"Cobertura;SonarQube";
        displayName: Generate code coverage report

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '$(Pipeline.Workspace)/project/**/*.trx'
          mergeTestResults: true
        displayName: Publish test result

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: $(Pipeline.Workspace)/project/Reports_Coverage/Cobertura.xml
          pathToSources: $(Pipeline.Workspace)/project/src/
        displayName: Publish coverage

    - task: DotNetCoreCLI@2
      displayName: Publish for ${{ parameters.target_framework }}
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
        arguments: '-c Release -o $(Build.ArtifactStagingDirectory)/${{ parameters.target_framework }} -f ${{ parameters.target_framework }}'
        zipAfterPublish: true
        modifyOutputPath: true
        configuration: 'Release'
        versioningScheme: byEnvVar
        versionEnvVar: version

    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'
        artifact: '${{parameters.artifact_name}}'

- ${{ if eq(parameters.run_sonar, true) }}:
  - stage: run_sonar
    displayName: 'Run Sonar'
    pool:
      name: ${{parameters.pool}}
    dependsOn: ${{parameters.depends_on}}
    jobs:
      - job: sonar
        displayName: 'Sonar'
        condition: succeeded()
        variables:
          version: ${{parameters.version}}
        steps:
          - checkout: self
            path: 'project'
          - checkout: 'templates'
            path: 'templates'

          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: ${{parameters.sonar_service}}
              organization: ${{parameters.sonar_organization}}
              scannerMode: 'dotnet'
              projectKey: ${{parameters.sonar_project_key}}
              projectVersion: '${{parameters.version}}'
              extraProperties: |
                # Additional properties that will be passed to the scanner, 
                # Put one key=value per line, example:
                sonar.exclusions=**/*test*
                sonar.exclusions=**/lib/**
                sonar.coverageReportPaths=$(Pipeline.Workspace)/project/Reports_Coverage/SonarQube.xml

          - task: UseDotNet@2
            displayName: 'Installing .Net Core SDK'
            inputs:
              packageType: 'sdk'
              version: ${{ replace(replace(parameters.target_framework, '0', 'x'),  'net',  '') }}

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '$(Pipeline.Workspace)/project/*.sln'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build'
              projects: '$(Pipeline.Workspace)/project'
              arguments: '--no-incremental --no-restore --configuration Release'

          - ${{ if eq(parameters.run_tests, true) }}:
              - task: DotNetCoreCLI@2
                displayName: Install ReportGenerator Global Tool
                inputs:
                  command: custom
                  custom: tool
                  arguments: update dotnet-reportgenerator-globaltool --tool-path tools --ignore-failed-sources

              - bash: |
                  ls $(Pipeline.Workspace)/project/test*/**/*.csproj | xargs -L1 dotnet test --collect:"XPlat Code Coverage" --settings $COVERLET_PATH --logger trx
                displayName: Test
                env:
                  COVERLET_PATH: '$(Pipeline.Workspace)/templates/coverlet/coverlet.runsettings'

              - bash: |
                  ./tools/reportgenerator "-reports:$(Pipeline.Workspace)/project/test*/*/TestResults/*/coverage.cobertura.xml" "-targetdir:$(Pipeline.Workspace)/project/Reports_Coverage" -reportTypes:"Cobertura;SonarQube";
                displayName: Generate code coverage report

              - task: PublishTestResults@2
                inputs:
                  testResultsFormat: 'VSTest'
                  testResultsFiles: '$(Pipeline.Workspace)/project/**/*.trx'
                  mergeTestResults: true
                displayName: Publish test result

              - task: PublishCodeCoverageResults@1
                inputs:
                  codeCoverageTool: 'Cobertura'
                  summaryFileLocation: $(Pipeline.Workspace)/project/Reports_Coverage/Cobertura.xml
                  pathToSources: $(Pipeline.Workspace)/project/src/
                displayName: Publish coverage

          - task: SonarCloudAnalyze@3
            displayName: 'Run Code Analysis'
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          - task: SonarCloudPublish@3
            displayName: 'Publish Quality Gate Result'
            inputs:
              pollingTimeoutSec: '300'
          
          