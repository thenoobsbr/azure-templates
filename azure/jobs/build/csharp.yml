parameters:
- name: name
  type: string
- name: display_name
  type: string
- name: condition
  type: boolean
  default: true
- name: artifact_name
  type: string
- name: project_path
  type: string
- name: target_framework
  type: string
  default: net9.0
  values:
  - net5.0
  - net6.0
  - net7.0
  - net8.0
  - net9.0
- name: increment_version
  type: string
  default: 'patch'
  values:
  - 'ignore'
  - 'major'
  - 'minor'
  - 'patch'
- name: suffix
  type: string
  default: 'none'
  values:
    - 'none'
    - 'ci'
    - 'alpha'
    - 'beta'
    - 'rc'
- name: run_tests
  type: boolean
  default: true
- name: migration_bundle
  type: boolean
  default: true

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.display_name }}
    condition: and(succeeded(), ${{parameters.condition}})
    variables:
      sdk_version: $[ replace(replace('${{ parameters.target_framework }}', 'net', ''), '0', 'x') ]
      net_version: ${{ parameters.target_framework }}
      release: $[counter(format('{0}:{1}:{2}', variables['Build.SourceBranchName'], '${{parameters.project_path}}', '${{parameters.suffix}}'), 1)]
      project_absolute_path: $(Pipeline.Workspace)/project/${{parameters.project_path}}
    steps:
    - checkout: self
      path: 'project'

    - checkout: 'templates'
      path: 'templates'

    - template: /azure/steps/version/calculate.yml@templates
      parameters:
        project_path: $(project_absolute_path)
        increment: ${{parameters.increment_version}}
        release: $(release)
        suffix: ${{parameters.suffix}}

    - task: UseDotNet@2
      displayName: 'Installing .Net Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(sdk_version)

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: $(project_absolute_path)

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: $(project_absolute_path)
        arguments: '--no-incremental --no-restore --configuration Release -p:Version=$(calculate_version.new_version)'

    - ${{ if eq(parameters.run_tests, true) }}:
      - task: DotNetCoreCLI@2
        displayName: Install ReportGenerator Global Tool
        inputs:
          command: custom
          custom: tool
          arguments: update dotnet-reportgenerator-globaltool --tool-path tools --ignore-failed-sources

      - bash: |
          ls $(Pipeline.Workspace)/project/test*/**/*.csproj | xargs -L1 dotnet test --collect:"XPlat Code Coverage" --settings $COVERLET_PATH --logger trx
        displayName: Test
        env:
          COVERLET_PATH: '$(Pipeline.Workspace)/templates/coverlet/coverlet.runsettings'

      - bash: |
          ./tools/reportgenerator "-reports:$(Pipeline.Workspace)/project/test*/*/TestResults/*/coverage.cobertura.xml" "-targetdir:$(Pipeline.Workspace)/project/Reports_Coverage" -reportTypes:"Cobertura;SonarQube";
        displayName: Generate code coverage report

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '$(Pipeline.Workspace)/project/**/*.trx'
          mergeTestResults: true
        displayName: Publish test result

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: $(Pipeline.Workspace)/project/Reports_Coverage/Cobertura.xml
          pathToSources: $(Pipeline.Workspace)/project/src/
        displayName: Publish coverage

    - task: DotNetCoreCLI@2
      displayName: Publish for $(net_version)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: $(project_absolute_path)
        arguments: '-c Release -o $(Build.ArtifactStagingDirectory)/$(net_version) -f $(net_version) -p:Version=$(calculate_version.new_version)'
        zipAfterPublish: true
        modifyOutputPath: true
        configuration: 'Release'
    
    - ${{ if eq(parameters.migration_bundle, true) }}:
      - task: DotNetCoreCLI@2
        displayName: Install EF Tool
        inputs:
          command: custom
          custom: tool
          arguments: update dotnet-ef --tool-path tools --ignore-failed-sources

      - bash: |
            ./tools/dotnet-ef migrations bundle --project $(project_absolute_path) --runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/efbundle
        displayName: Generate EF bundle

    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'
        artifact: '${{parameters.artifact_name}}'