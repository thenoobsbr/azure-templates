parameters:
- name: name
  type: string
- name: display_name
  type: string
- name: condition
  type: boolean
  default: true
- name: artifact_name
  type: string
- name: environment
  type: string
  default: Docker Registry
- name: image_name
  type: string
- name: container_registry
  type: string
- name: dll_name
  type: string
- name: target_framework
  type: string
  default: net9.0
  values:
  - net5.0
  - net6.0
  - net7.0
  - net8.0
  - net9.0

jobs:
  - deployment: ${{parameters.name}}
    displayName: '${{parameters.display_name}}'
    environment: ${{parameters.environment}}
    condition: and(succeeded(), ${{parameters.condition}})
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: 'templates'
            path: 'templates'

          - task: ExtractFiles@1
            name: extract_artifact
            displayName: 'Extract artifact'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/${{parameters.artifact_name}}/**/*.zip'
              destinationFolder: '$(Pipeline.Workspace)/${{parameters.artifact_name}}/deploy'
              cleanDestinationFolder: true
              overwriteExistingFiles: true

          - task: Bash@3
            displayName: 'Create entrypoint script'
            inputs:
              targetType: 'inline'
              script: |
                cd $(Pipeline.Workspace)/${{parameters.artifact_name}}/deploy
                echo "#!/bin/bash \n dotnet ${{ parameters.dll_name }}" > ./entrypoint.sh
                ls

          - template: /azure/steps/version/get.yml@templates
            parameters:
              dll_path: '$(Pipeline.Workspace)/${{parameters.artifact_name}}/deploy/${{parameters.dll_name}}'

          - task: Docker@2
            name: build
            displayName: 'Build image'
            inputs:
              containerRegistry: ${{ parameters.container_registry }}
              repository: ${{ parameters.image_name }}
              command: 'build'
              Dockerfile: '$(Pipeline.Workspace)/templates/azure/dockerfiles/csharp.Dockerfile'
              buildContext: $(Pipeline.Workspace)/${{parameters.artifact_name}}/deploy
              arguments: --build-arg IMAGE_VERSION=${{ replace(parameters.target_framework, 'net', '') }}-alpine
              tags: $(get_version.version)
              addPipelineData: false
              addBaseImageData: false

          - task: Docker@2
            name: push
            displayName: 'Push image'
            inputs:
              containerRegistry: ${{ parameters.container_registry }}
              repository: ${{ parameters.image_name }}
              command: 'push'
              tags: $(get_version.version)